generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  name              String
  email             String            @unique
  cpf               String            @unique
  age               String?           @default("")
  photo             String?           @default("")
  phone             String
  password          String
  isVerified        Boolean           @default(false)
  active            Boolean           @default(true)
  motivoDesativacao String?           @default("")
  address           Address?
  animalsFound      AnimalFound[]
  lostAnimals       LostAnimal[]
  availableAnimals  AvailableAnimal[]
  sendedMessages    Message[]         @relation("sendMessages")
  receivedMessages  Message[]         @relation("receivedMessages")
  reportedReports   Report[]          @relation("ReportsByUser")
  receivedReports   Report[]          @relation("ReportsAboutUser")
}

model Message {
  id            String   @id @default(uuid())
  title         String
  content       String
  senderId      String
  receiverId    String
  createdAt     DateTime @default(now())
  sender        User?    @relation(fields: [senderId], references: [id], name: "sendMessages")
  receiver      User?    @relation(fields: [receiverId], references: [id], name: "receivedMessages")
  reportMessage Report[]
}

model Address {
  id         String  @id @default(uuid())
  cep        String
  complement String? @default("")
  number     String? @default("")
  userId     String? @unique
  user       User?   @relation(fields: [userId], references: [id])
}

model AnimalFound {
  id                          String   @id @default(uuid())
  photo                       String[] @default([""])
  found_location              String
  species                     String
  race                        String
  age                         String
  color                       String
  size                        String
  distinctive_characteristics String
  userId                      String
  user                        User?    @relation(fields: [userId], references: [id])
}

model LostAnimal {
  id                          String   @id @default(uuid())
  species                     String
  race                        String
  photo                       String[] @default([""])
  age                         String
  color                       String
  size                        String
  distinctive_characteristics String
  date_loss                   String
  location_loss               String
  userId                      String
  user                        User?    @relation(fields: [userId], references: [id])
}

model AvailableAnimal {
  id                          String   @id @default(uuid())
  species                     String
  race                        String
  photo                       String[] @default([""])
  age                         String
  color                       String
  size                        String
  distinctive_characteristics String
  personality_description     String
  userId                      String
  user                        User?    @relation(fields: [userId], references: [id])
}

model Ongs {
  id          String  @id @default(uuid())
  name        String
  address     String
  contact     String
  website     String? @default("")
  description String? @default("")
  logo        String? @default("")
}

model Report {
  id              String   @id @default(uuid())
  reportingUser   User?    @relation("ReportsByUser", fields: [reportingUserId], references: [id])
  reportingUserId String
  reportedUser    User?    @relation("ReportsAboutUser", fields: [reportedUserId], references: [id])
  reportedUserId  String
  messageId       String?  @map("messageId")
  reason          String
  resolved        Boolean  @default(false)
  createdAt       DateTime @default(now())
  message         Message? @relation(fields: [messageId], references: [id])
}
